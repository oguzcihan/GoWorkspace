	/*
		r := gin.Default()
		r.GET("/ping", func(context *gin.Context) {
			context.JSON(200, gin.H{
				"message": "pong",
			})
		})
		r.Run(":9090")
	*/
	//godotenv.Load(".env")
	//connection := os.Getenv("SQL_DRIVER")
	//fmt.Println("driver: " + connection)
	//server.RunServer()
	


func isValid(s string) bool {
	var (
		hasMinLen  = false
		hasUpper   = false
		hasLower   = false
		hasNumber  = false
		hasSpecial = false
	)
	if len(s) >= 7 {
		hasMinLen = true
	}
	for _, char := range s {
		switch {
		case unicode.IsUpper(char):
			hasUpper = true
		case unicode.IsLower(char):
			hasLower = true
		case unicode.IsNumber(char):
			hasNumber = true
		case unicode.IsPunct(char) || unicode.IsSymbol(char):
			hasSpecial = true
		}
	}
	return hasMinLen && hasUpper && hasLower && hasNumber && hasSpecial
}
func verifyPassword(password string) error {
	var uppercasePresent bool
	var lowercasePresent bool
	var numberPresent bool
	var specialCharPresent bool
	const minPassLength = 8
	const maxPassLength = 64
	var passLen int
	var errorString string

	for _, ch := range password {
		switch {
		case unicode.IsNumber(ch):
			numberPresent = true
			passLen++
		case unicode.IsUpper(ch):
			uppercasePresent = true
			passLen++
		case unicode.IsLower(ch):
			lowercasePresent = true
			passLen++
		case unicode.IsPunct(ch) || unicode.IsSymbol(ch):
			specialCharPresent = true
			passLen++
		case ch == ' ':
			passLen++
		}
	}
	appendError := func(err string) {
		if len(strings.TrimSpace(errorString)) != 0 {
			errorString += ", " + err
		} else {
			errorString = err
		}
	}
	if !lowercasePresent {
		appendError("lowercase letter missing")
	}
	if !uppercasePresent {
		appendError("uppercase letter missing")
	}
	if !numberPresent {
		appendError("atleast one numeric character required")
	}
	if !specialCharPresent {
		appendError("special character missing")
	}
	if !(minPassLength <= passLen && passLen <= maxPassLength) {
		appendError(fmt.Sprintf("password length must be between %d to %d characters long", minPassLength, maxPassLength))
	}

	if len(errorString) != 0 {
		return fmt.Errorf(errorString)
	}
	return nil
}

type User struct {
	Email    string `json:"email" validate:"required,email"`
	Name     string `json:"name" validate:"required"`
	Password string `json:"password" validate:"passwd"`
}

func TestUserValidator() {
	translatorTr := tr.New()
	universal := ut.New(translatorTr, translatorTr)
	getTrans, found := universal.GetTranslator("tr")
	if !found {
		log.Fatal("Translator bulunamadı")
	}
	validate := validator.New()

	if err := trTrans.RegisterDefaultTranslations(validate, getTrans); err != nil {
		log.Fatal(err)
	}

	//_ = validate.RegisterTranslation("passwd", getTrans, func(ut ut.Translator) error {
	//	return ut.Add("passwd", "{0} geçersiz", true) // see universal-translator for details
	//}, func(ut ut.Translator, fe validator.FieldError) string {
	//	t, _ := ut.T("passwd", fe.Field())
	//	return t
	//})

	_ = validate.RegisterValidation("passwd", func(fl validator.FieldLevel) bool {
		return len(fl.Field().String()) > 6
	})

	a := User{
		Email:    "a",
		Password: "1234",
	}
	err := validate.Struct(a)
	//test := err.(validator.ValidationErrors)
	//test.Translate(trans)
	for _, e := range err.(validator.ValidationErrors) {
		fmt.Println(e.Translate(getTrans))
	}
}
func translateAll() {

	translatorTr := tr.New()
	universal := ut.New(translatorTr, translatorTr)
	getTrans, found := universal.GetTranslator("tr")
	if !found {
		log.Fatal("Translator bulunamadı")
	}
	validate := validator.New()

	if err := trTrans.RegisterDefaultTranslations(validate, getTrans); err != nil {
		log.Fatal(err)
	}
	type User struct {
		Username string `validate:"required"`
		Tagline  string `validate:"required,lt=10"`
		Tagline2 string `validate:"required,gt=1"`
	}

	user := User{
		Username: "Joeybloggs",
		Tagline:  "This tagline is way too long.",
		Tagline2: "1",
	}

	err := validate.Struct(user)
	if err != nil {

		// translate all error at once
		errs := err.(validator.ValidationErrors)

		// returns a map with key = namespace & value = translated error
		// NOTICE: 2 errors are returned and you'll see something surprising
		// translations are i18n aware!!!!
		// eg. '10 characters' vs '1 character'
		fmt.Println(errs.Translate(getTrans))
	}
}


//func (service UserService) GetUsername(userName string) (*User, error) {
//	//Send to incoming username repository layer
//	resUsername, err := service.repository.GetUsername(userName)
//	if err != nil {
//		return nil, err
//	}
//	return resUsername, nil
//}